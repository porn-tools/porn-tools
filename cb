#!/bin/bash
maxjobcount=3                  #max number of simultaneous streams
backoff=0                      #increase delay by n minutes for every retry
outputdir=$HOME/cb/out/        #where to write output
list=$HOME/cb/list.txt         #list of cams to check
autoadd=yes                    #auto add saved streams to cam list
upload_cmd="rclone -v"         #command to upload streams
upload_dest="p:cam/cb/"        #where to save with upload command
upload_dest_add_user=true      #store file in dir named for user
archive_cmd="$upload_cmd"      #uncomment to auto-archive streams
archive_dest="p:cam/incoming/" #where to save auto-archived streams
#archive_dest_add_user=true    #store file in dir named for user
livestreamer=streamlink        #stream recorder app

mkdir -p $outputdir
[ -f $list ] && touch $list

maxjobs() {
   while [ $(jobs|wc -l) -ge $maxjobcount ]
   do
      sleep 5
   done
}

upload() {
    shift
    local file
    for file in "$@"; do
	local upload_dir=$upload_dest
	[ -z "$upload_cmd" ] && echo "\$upload_cmd not defined." && exit 1
	[ -n "$upload_dest_add_user" ] && local upload_dir=$upload_dest/$(echo $file|cut -d- -f1) && ${upload_cmd/-v/-q} "mkdir" "$upload_dir"
	$upload_cmd "move" "$file" "$upload_dir/"
    done
}

archivestream() {
    local file=$outputdir/$1
    [ -n "$upload_dest_add_user" ] && local upload_dir=$upload_dest/$(echo $file|cut -d- -f1) && ${upload_cmd/-v/-q} "mkdir" "$upload_dir"
    ffmpeg -nostdin -loglevel error -i "$file.flv" -vcodec copy -acodec libmp3lame "$file.mp4" && rm "$file.flv" && [ -n "$archive_cmd" ] && $archive_cmd "move" "$file.mp4" $archive_dest
}

getstream () {
    local user=$1
    local date=$(date +%Y-%m-%d.%H-%M)
    local outfile="$outputdir/$user-$date.flv"
    $livestreamer -O http://chaturbate.com/$user best > $outfile ; out=$?
    if [ -s $outfile ]; then
	archivestream $user-$date
    else
	rm -f $outfile
    fi
    return $out
}

loopstream() {
    local user=$1
    local count=1
    local delay=1
    until [[ $count -eq 0 || $count -eq 10 ]] ; do 
	getstream $user
	out=$?
	count=$(($count+$out))
	delay=$(($delay+$backoff))
	echo count: $count delay: $delay out: $out
	sleep ${delay}m
    done
}    

findstream() {
    local cam
    for cam in $(tac $list|sed -e 'sShttp[s]*://chaturbate.com/SS' -e 'sS/$SS'); do
	ps ax|grep -q [c]haturbate.com/$cam || { getstream $cam && loopstream $cam; }
    done
}    

sanitizeurl() {
    echo $1|sed -e 'sShttp[s]*://chaturbate.com/SS' -e 'sS/$SS' -e 's/ /_/g'
}

add() {
    local cam=$(sanitizeurl "$1")
    grep -q $cam $list || echo $cam >> $list
}

remove() {
    local cam=$(sanitizeurl "$1")
    local tmpfile=$(mktemp)
    grep -q $cam $list || echo $cam is not in $list.
    grep -v "^${cam}\$" $list > $tmpfile && mv -f $tmpfile $list
}

save() {
    local cam=$(sanitizeurl "$1")
    [ "$autoadd" == "yes" ] && add $cam
    ps ax|grep -q [c]haturbate.com/$cam || { echo $cam already being saved. ;exit 1; }
    getstream $cam && loopstream $cam
}

stalk() {
    local cam=$(sanitizeurl "$1")
    while true; do 
	save $cam
	sleep 10m 
    done
}

daemon() {
#loop forever, wait up to 1 minute between starting new jobs
while true; do 
   maxjobs; findstream &
   sleep $(($RANDOM/540))s
done
wait
}

show_help() {
    echo "$0 [daemon]|[add|del|save|stalk <cam>]"
    echo .
    echo 'daemon - enter daemon mode, save cams from list'
    echo 'add <cam> - add cam to list'
    echo 'del <cam> - remove cam from list'
    echo 'save <cam> - save current cam stream'
    echo 'stalk <cam> - save current cam stream and retry forever'
}

[ -z "$1" ] && show_help && exit 1

[ "$1" == "daemon" ] && daemon

[ -z "$2" ] && show_help && exit 1

[ "$1" == "add" ] && add "$2"
[ "$1" == "del" ] && remove "$2"
[ "$1" == "delete" ] && remove "$2"
[ "$1" == "remove" ] && remove "$2"
[ "$1" == "save" ] && save "$2"
[ "$1" == "stalk" ] && stalk "$2"
[ "$1" == "upload" ] && upload "$@"
